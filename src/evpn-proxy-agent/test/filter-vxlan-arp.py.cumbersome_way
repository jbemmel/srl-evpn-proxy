#!/usr/bin/python
#
#Bertrone Matteo - Polytechnic of Turin
#November 2015
#
#eBPF application that parses HTTP packets
#and extracts (and prints on screen) the URL contained in the GET/POST request.
#
#eBPF program http_filter is used as SOCKET_FILTER attached to eth0 interface.
#only packet of type ip and tcp containing HTTP GET/POST are returned to userspace, others dropped
#
#python script uses bcc BPF Compiler Collection by iovisor (https://github.com/iovisor/bcc)
#and prints on stdout the first line of the HTTP GET/POST request containing the url

from __future__ import print_function
from bcc import BPF
from sys import argv

import sys
import socket
import os

from ryu.lib.packet import vxlan, ethernet, arp

#args
def usage():
    print("USAGE: %s [-i <if_name>]" % argv[0])
    print("")
    print("Try '%s -h' for more options." % argv[0])
    exit()

#help
def help():
    print("USAGE: %s [-i <if_name>]" % argv[0])
    print("")
    print("optional arguments:")
    print("   -h                       print this help")
    print("   -i if_name               select interface if_name. Default is eth0")
    print("")
    print("examples:")
    print(f"    {argv[0]}              # bind socket to mgmt0.0")
    print(f"    {argv[0]} -i e1-1      # bind socket to e1-1")
    exit()

#arguments
interface="mgmt0.0"

if len(argv) == 2:
  if str(argv[1]) == '-h':
    help()
  else:
    usage()

if len(argv) == 3:
  if str(argv[1]) == '-i':
    interface = argv[2]
  else:
    usage()

if len(argv) > 3:
  usage()

print ("binding socket to '%s'" % interface)

# initialize BPF - load source code from http-parse-simple.c
bpf = BPF(src_file = "filter-vxlan-arp.c",debug = 0)

#load eBPF program http_filter of type SOCKET_FILTER into the kernel eBPF vm
#more info about eBPF program types
#http://man7.org/linux/man-pages/man2/bpf.2.html
function_arp_filter = bpf.load_func("udp_filter", BPF.SOCKET_FILTER)

#create raw socket, bind it to interface
#attach bpf program to socket created
BPF.attach_raw_socket(function_arp_filter, interface)

#get file descriptor of the socket previously created inside BPF.attach_raw_socket
socket_fd = function_arp_filter.sock

#create python socket object, from the file descriptor
sock = socket.fromfd(socket_fd,socket.PF_PACKET,socket.SOCK_RAW,socket.IPPROTO_IP)
#set it as blocking socket
sock.setblocking(True)

while 1:
  #retrieve raw packet from socket
  packet_str = os.read(socket_fd,2048)

  #DEBUG - print raw packet in hex format
  #packet_hex = toHex(packet_str)
  #print ("%s" % packet_hex)

  #convert packet into bytearray
  packet_bytearray = bytearray(packet_str)

  #ethernet header length
  ETH_HLEN = 14

  #IP HEADER
  #https://tools.ietf.org/html/rfc791
  # 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  # +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  # |Version|  IHL  |Type of Service|          Total Length         |
  # +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  #
  #IHL : Internet Header Length is the length of the internet header
  #value to multiply * 4 byte
  #e.g. IHL = 5 ; IP Header Length = 5 * 4 byte = 20 byte
  #
  #Total length: This 16-bit field defines the entire packet size,
  #including header and data, in bytes.

  #calculate packet total length
  total_length = packet_bytearray[ETH_HLEN + 2]               #load MSB
  total_length = total_length << 8                            #shift MSB
  total_length = total_length + packet_bytearray[ETH_HLEN+3]  #add LSB

  #calculate ip header length
  ip_header_length = packet_bytearray[ETH_HLEN]               #load Byte
  ip_header_length = ip_header_length & 0x0F                  #mask bits 0..3
  ip_header_length = ip_header_length << 2                    #shift to obtain length

  print( f"Got IP packet len={total_length}" ) # Also ICMP during testing

# UDP HEADER
# https://www.rfc-editor.org/rfc/rfc768.txt
#                  0      7 8     15 16    23 24    31
#                 +--------+--------+--------+--------+
#                 |     Source      |   Destination   |
#                 |      Port       |      Port       |
#                 +--------+--------+--------+--------+
#                 |                 |                 |
#                 |     Length      |    Checksum     |
#                 +--------+--------+--------+--------+
#                 |
#                 |          data octets ...
#                 +---------------- ...
#
#                      User Datagram Header Format
  udp_header_length = 8
  u = ETH_HLEN + ip_header_length
  src_port = (packet_bytearray[u+0] << 8) + packet_bytearray[u+1]
  dst_port = (packet_bytearray[u+2] << 8) + packet_bytearray[u+3]
  print( f"UDP? src={src_port} dst={dst_port}\n" )

  #calculate VXLAN offset
  vxlan_offset = ETH_HLEN + ip_header_length + udp_header_length

  try:
    pkt = packet.Packet(array.array('B', packet_bytearray[vxlan_offset:]))
    for p in pkt:
        print p.protocol_name, p
        if p.protocol_name == 'vlan':
            print 'vid = ', p.vid

    vxlan_pkt, next_proto_cls, rest_buf = vxlan.vxlan.parser(packet_bytearray[vxlan_offset:])
    print( f"VXLAN VNI:{vxlan_pkt.vni} next={next_proto_cls} remaining={len(rest_buf)}" )
    inner_eth, next_proto_cls, rest_buf = next_proto_cls.parser( rest_buf )
    print( f"next={next_proto_cls} remaining={len(rest_buf)}" )
    inner_arp, next_proto_cls, rest_buf = next_proto_cls.parser( rest_buf )
    if next_proto_cls == arp.arp:
       print( f"SRC MAC:{inner_arp.src_mac} SRC IP:{inner_arp.src_ip}" )
    else:
       print( f"Not ARP but {next_proto_cls}" )

    # print VXLAN packet bytes
    for i in range (vxlan_offset,len(packet_bytearray)-1):
      print("%0x" % (packet_bytearray[i]), end = "")
    print("")
  except AssertionError as e:
    print( "Not a valid VXLAN packet" )

  # Debug - requires '/sys/kernel/debug/tracing/trace_pipe' to be mounted
  # (task, pid, cpu, flags, ts, msg) = bpf.trace_fields( nonblocking=True )
  # print( f'trace_fields: {msg}' )
